Index: src/insulinPumpController/Compdose.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package insulinPumpController;\r\n\r\npublic class Compdose {\r\n\r\n    //Enum status; // controller status\r\n\r\n    // get switch value switch.getStatus\r\n// example\r\n//    SwitchValue switchValue; // switch status\r\n    State insulinPump; // mode status\r\n    AlarmValue alarm; // alarm status\r\n    int r2 = 0; // current sensor reading\r\n    int r1 = 0; // previous sensor reading\r\n    int r0 = 0; // previous to r1 sensor reading\r\n//    int capacity = 100; // capacity of insulin reservoir in mL\r\n//    int insulin_available = 100; // insulin reservoir level\r\n//    int max_single_dose = 4; // maximum amount of single dose\r\n//    int max_daily_dose = 25; // maximum amount of daily dose\r\n    int minimum_dose = 1; // minimum dose\r\n    int safemin = 6; // minimum safe blood sugar level\r\n    int safemax = 14; // maximum safe blood sugar level\r\n//    int cumulative_dose = 0; // total dose in last 24 hours\r\n//    int sensorReading;\r\n    int comp_dose = 0;\r\n    String display1;\r\n\r\n\r\n    public Compdose(int v0, int v1, int v2) {\r\n\r\n        this.r0 = v0;\r\n        this.r1 = v1;\r\n        this.r2 = v2;\r\n\r\n<<<<<<< Updated upstream\r\n\r\n=======\r\n    public int calculate() {\r\n        // SUGAR_LOW schema\r\n        if (r2 < safemin) {\r\n            comp_dose = 0;\r\n//            alarm = ON;\r\n            setAlarm(ALARM_ON);\r\n//            statusValue = StatusValue.WARNING;\r\n            setStatus(WARNING);\r\n//            display1 = \"Sugar Low\";\r\n            setDisplay1(\"Sugar Low\");\r\n        }\r\n>>>>>>> Stashed changes\r\n\r\n        // SUGAR_OK schema\r\n        else if (r2 >= safemin && r2 <= safemax) {\r\n            // sugar level stable or falling\r\n            if (r2 <= r1) {\r\n                comp_dose = 0;\r\n            }\r\n            // sugar level increasing but rate of increase falling\r\n            else if (r2 > r1 && (r2 - r1) < (r1 - r0)) {\r\n                comp_dose = 0;\r\n            }\r\n            // sugar level increasing and rate of increase increasing compute dose\r\n            // a minimum dose must be delivered if rounded to zero\r\n            else if (r2 > r1 && (r2 - r1) >= (r1 - r0) && (r2 - r1) == 0) {\r\n                comp_dose = minimum_dose;\r\n            } else if (r2 > r1 && (r2 - r1) >= (r1 - r0) && (r2 - r1) > 0) {\r\n                comp_dose = (r2 - r1) / 4;\r\n            }\r\n        }\r\n\r\n        // SUGAR_HIGH schema\r\n        else if (r2 > safemax){\r\n            // sugar level increasing. Round down if below 1 unit.\r\n            if (r2 > r1 && (r2 - r1) / 4 == 0){\r\n                comp_dose = minimum_dose;\r\n            }else if (r2 > r1 && (r2 - r1) / 4 > 0){\r\n                comp_dose = (r2 - r1) / 4;\r\n            }\r\n            // sugar level stable\r\n            else if (r2 == r1){\r\n                comp_dose = minimum_dose;\r\n            }\r\n            // sugar level falling and rate of decrease increasing\r\n            else if (r2<r1 && (r2 - r1) > (r1 - r0)){\r\n                comp_dose = minimum_dose;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        // Set Alarm\r\n        setAlarm(alarm);\r\n        // set status\r\n        setStatus(insulinPump);\r\n        // set display1\r\n        setDisplay1(display1);\r\n    }\r\n\r\n    public void setAlarm(AlarmValue alarm) {\r\n        this.alarm = alarm;\r\n    }\r\n\r\n    public AlarmValue getAlarm() {\r\n        return alarm;\r\n    }\r\n\r\n    public void setStatus(State insulinPump) {\r\n        this.insulinPump = insulinPump;\r\n    }\r\n\r\n    public State getStatus() {\r\n        return insulinPump;\r\n    }\r\n\r\n    public void setDisplay1(String display1) {\r\n        this.display1 = display1;\r\n    }\r\n\r\n    public String getDisplay1() {\r\n        return display1;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/insulinPumpController/Compdose.java	(revision 7e9cbad3b082f57b08f5f631740b57ce6c608b98)
+++ src/insulinPumpController/Compdose.java	(date 1603951661620)
@@ -45,6 +45,7 @@
 //            display1 = "Sugar Low";
             setDisplay1("Sugar Low");
         }
+
 >>>>>>> Stashed changes
 
         // SUGAR_OK schema
Index: src/insulinPumpController/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package insulinPumpController;\r\n\r\nimport input.*;\r\n\r\nimport static input.Switch.setValue;\r\n\r\npublic class Controller {\r\n\r\n    private static final int safeMin = 6; // minimum safe blood sugar level\r\n    final int safeMax = 14; // maximum safe blood sugar level\r\n    private static Sensor sensor = new Sensor();\r\n    private static int r2 = sensor.getReading(); // current sensor reading\r\n    int r1 = safeMax; // previous sensor reading\r\n    int r0 = safeMin; // previous to r1 sensor reading\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public static void compDose(){\r\n\r\n        int compDose;\r\n\r\n        // SUGAR_LOW schema\r\n        if (r2 < safeMin) {\r\n            compDose = 0;\r\n            alarm = AlarmValue.ON;\r\n            insulinPump = State.TEST;\r\n            display1 = \"Sugar Low\";\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n\r\n\r\n\r\n\r\n        Reservior reservior = new Reservior();\r\n\r\n        Compdose compdose = new Compdose(r0, r1, r2);\r\n        int computedDose = 0;\r\n\r\n\r\n        final int max_single_dose = 4; // maximum amount of single dose\r\n        final int max_daily_dose = 25; // maximum amount of daily dose\r\n        final int minimum_dose = 1; // minimum dose\r\n        int cumulative_dose = 0; // total dose in last 24 hours\r\n        int dose = 0;\r\n\r\n        State insulinPump = State.RUN; // mode status\r\n        AlarmValue alarm; // alarm status\r\n        String display1;\r\n        SwitchValue switchValue = setValue(SwitchValue.OFF);\r\n        InsulinReservoir insulinReservoir = InsulinReservoir.NOT_PRESENT;\r\n        InsulinLevel insulinLevel = InsulinLevel.NOT_OK;\r\n        HardwareTest hardwareTest = HardwareTest.OK;\r\n        Needle needle = Needle.NOT_PRESENT;\r\n\r\n        // STARTUP\r\n        if (switchValue == SwitchValue.OFF || switchValue == SwitchValue.AUTO){\r\n            dose = 0;\r\n            r0 = safeMin;\r\n            r1 = safeMax;\r\n            // RUN TEST\r\n        }\r\n\r\n        // RESET\r\n        while (insulinReservoir == InsulinReservoir.NOT_PRESENT){\r\n            if (insulinReservoir == InsulinReservoir.PRESENT){\r\n                insulin_available = capacity;\r\n                insulinLevel = InsulinLevel.OK;\r\n                // RUN TEST\r\n                break;\r\n            }\r\n        }\r\n\r\n        // TEST\r\n        if (hardwareTest == HardwareTest.OK && needle == Needle.PRESENT && insulinReservoir == InsulinReservoir.PRESENT){\r\n            insulinPump = State.RUN;\r\n            alarm = AlarmValue.OFF;\r\n            display1 = \"\";\r\n        }\r\n        while (insulinPump == State.TEST){\r\n            alarm = AlarmValue.ON;\r\n            if (needle == Needle.NOT_PRESENT){\r\n                display1 = \"No needle unit\";\r\n            }\r\n            else if (insulinReservoir == InsulinReservoir.NOT_PRESENT || insulin_available < max_single_dose){\r\n                display1 = \"No insulin\";\r\n            }\r\n            else if (hardwareTest == HardwareTest.BATTERYLOW){\r\n                display1 = \"Battery low\";\r\n            }\r\n            else if (hardwareTest == HardwareTest.PUMPFAIL){\r\n                display1 = \"Pump failure\";\r\n            }\r\n            else if (hardwareTest == HardwareTest.SENSORFAIL){\r\n                display1 = \"Sensor failure\";\r\n            }\r\n            else if (hardwareTest == HardwareTest.DELIVERYFAIL){\r\n                display1 = \"Needle failure\";\r\n            }\r\n            else if (hardwareTest == HardwareTest.OK && needle == Needle.PRESENT && insulinReservoir == InsulinReservoir.PRESENT){\r\n                insulinPump = State.RUN;\r\n                alarm = AlarmValue.OFF;\r\n                display1 = \"\";\r\n            }\r\n        }\r\n\r\n        // RUN\r\n        while (switchValue == SwitchValue.AUTO && (insulinPump ==  State.RUN || insulinPump == State.RUN)\r\n                && insulin_available >= max_single_dose && cumulative_dose < max_daily_dose){\r\n            // If the computed insulin dose is zero, donâ€™t deliver any insulin\r\n            if (computedDose == 0){\r\n                dose = 0;\r\n            }\r\n            // The maximum daily dose would be exceeded if the computed dose was delivered\r\n            else if(computedDose + cumulative_dose > max_daily_dose){\r\n                alarm = AlarmValue.ON;\r\n                insulinPump = State.TEST;\r\n                dose = max_daily_dose - cumulative_dose;\r\n            }\r\n            // The normal situation. If maximum single dose is not exceeded then deliver computed dose\r\n            else if ((computedDose + cumulative_dose) < max_daily_dose && computedDose <= max_single_dose){\r\n                dose = computedDose;\r\n            }\r\n            // The single dose computed is too high. Restrict the dose delivered to the maximum single dose\r\n            else if (computedDose > max_single_dose){\r\n                dose = max_single_dose;\r\n            }\r\n\r\n            insulin_available = insulin_available - dose;\r\n            cumulative_dose = cumulative_dose + dose;\r\n\r\n            if (insulin_available <= (max_single_dose * 4)){\r\n                insulinPump = State.TEST;\r\n                display1 = \"Insulin low\";\r\n            }\r\n\r\n            r1 = r2;\r\n            r0 = r1;\r\n        }\r\n\r\n        // MANUAL\r\n        if (switchValue == SwitchValue.MANUAL){\r\n            display1 = \"Manual Override\";\r\n            // dose = read manualDeliveryButton;\r\n            // do something with the reading to convert to dose\r\n            cumulative_dose = cumulative_dose + dose;\r\n            insulin_available = insulin_available - dose;\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/insulinPumpController/Controller.java	(revision 7e9cbad3b082f57b08f5f631740b57ce6c608b98)
+++ src/insulinPumpController/Controller.java	(date 1603951557270)
@@ -15,9 +15,6 @@
 
 
 
-
-
-
     public static void compDose(){
 
         int compDose;
